<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.3.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>__MY_GIT_URL__</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>__MY_GIT_BRANCH__</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.63">
      <scriptText>import groovy.json.JsonSlurper

import java.net.URL
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection
import javax.net.ssl.SSLContext
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager

def nullTrustManager = [
    checkClientTrusted: { chain, authType -&gt;  },
    checkServerTrusted: { chain, authType -&gt;  },
    getAcceptedIssuers: { null }
]

def nullHostnameVerifier = [
    verify: { hostname, session -&gt; true }
]

SSLContext sc = SSLContext.getInstance(&quot;SSL&quot;)
sc.init(null, [nullTrustManager as X509TrustManager] as TrustManager[], null)
HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory())
HttpsURLConnection.setDefaultHostnameVerifier(nullHostnameVerifier as HostnameVerifier)

String kubeToken = new File(&apos;/var/run/secrets/kubernetes.io/serviceaccount/token&apos;).text
println &quot;kubeToken: $kubeToken&quot;

URLConnection connection = new URL(&quot;https://kubernetes.default/api/v1/namespaces/default/configmaps/deployment-targets&quot;).openConnection()
connection.setRequestProperty(&quot;Authorization&quot;, &quot;Bearer ${kubeToken}&quot;)

println connection.responseCode

def gitUrl = &quot;__MY_GIT_URL__&quot;
def gitBranch = &quot;__MY_GIT_BRANCH__&quot;
def deployTargets = new groovy.json.JsonSlurper().parseText(connection.inputStream.text)
def deployTargetStr = deployTargets.data.clusters.tokenize().join(&apos;,&apos;)

def buildScript = readFileFromWorkspace(&quot;jenkins/Jenkinsfile-build&quot;)
buildScript = buildScript.replaceAll( &apos;__GIT_URL__&apos;, &quot;${gitUrl}&quot; )
buildScript = buildScript.replaceAll( &apos;__GIT_BRANCH__&apos;, &quot;${gitBranch}&quot; )

pipelineJob (&quot;build-customer-service&quot;) {
  definition {
    cps {
      script(buildScript)
      sandbox()
    }
    
    parameters {
        stringParam(&apos;clusters&apos;, &quot;${deployTargetStr}&quot;, &apos;list of cluster targets to trigger after build&apos;)
    }
  }
}

deployTargets.data.clusters.tokenize().each { cluster -&gt;
  def deployScript = readFileFromWorkspace(&quot;jenkins/Jenkinsfile-deploy&quot;)

  deployScript = deployScript.replaceAll( &apos;__CLUSTER__&apos;, &quot;${cluster}&quot; )
  deployScript = deployScript.replaceAll( &apos;__GIT_URL__&apos;, &quot;${gitUrl}&quot; )
  deployScript = deployScript.replaceAll( &apos;__GIT_BRANCH__&apos;, &quot;${gitBranch}&quot; )
  
  pipelineJob (&quot;deploy-customer-service-${cluster}&quot;) {
    definition {
      cps {
        script(deployScript)
        sandbox()
      }

      parameters {
        stringParam(&apos;cluster&apos;, &quot;${cluster}&quot;, &apos;prefix of secret containing kubernetes configuration for deployment to&apos;)
        stringParam(&apos;image_repository&apos;, &apos;&apos;, &apos;Repository of the docker image to be deployed.  For Bluemix private registry, this will look like registry.ng.bluemix.net/&lt;namespace&gt;/&lt;image&gt;&apos;)
        stringParam(&apos;image_tag&apos;, &apos;&apos;, &apos;Tag for built docker image to be deployed.  For images built using the Build job, this is usually the build number.&apos;)
        stringParam(&apos;image_pullSecretName&apos;, &apos;bluecompute-customer-image-pull-secret&apos;, &apos;Image pull secret name for customer service.  If it exists, will update to value of image_pullSecret.&apos;)
        stringParam(&apos;image_pullSecret&apos;, &apos;&apos;, &apos;Image pull secret contents for registry where the built image is stored.&apos;)
      }
    }
  }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>DELETE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
