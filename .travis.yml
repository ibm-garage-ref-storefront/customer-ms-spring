sudo: required
dist: xenial
language: java
jdk:
  - openjdk8
env:
  global:
    - IMAGE_NAME=bluecompute-customer
    - RELEASE_NAME=customer
    - TAG=travis-latest
    - SERVICE_PORT=8082
    - MANAGEMENT_PORT=8092
    - HS256_KEY=E6526VJkKYhyTFRFMC0pTECpHcZ7TGcq8pKsVVgz9KtESVpheEO284qKzfzg8HpWNBPeHOxNGlyudUHi6i8tFQJXC8PiI48RUpMh23vPDLGD35pCM0417gf58z5xlmRNii56fwRCmIhhV7hDsm3KO2jRv4EBVz7HrYbzFeqI45CaStkMYNipzSm2duuer7zRdMjEKIdqsby0JfpQpykHmC5L6hxkX0BT7XWqztTr6xHCwqst26O0g8r7bXSYjp4a
    - COUCHDB_USER=admin
    - COUCHDB_PASSWORD=passw0rd
    - TEST_USER=testuser
    - TEST_PASSWORD=passw0rd
stages:
  - local build and test
  - docker build, deploy, and test
  - kubernetes build, deploy, and test
jobs:
  include:
    - stage: local build and test
      services:
      - docker
      before_cache:
        - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
      before_script:
      # Start CouchDB 2.1.2 and wait for it to start
      # Using this instead of built-in couchdb, which is 1.6.1
      - docker run --name couchdb -p 5985:5984 -e COUCHDB_USER=${COUCHDB_USER} -e COUCHDB_PASSWORD=${COUCHDB_PASSWORD} -d couchdb:2.1.2
      # Wait for CouchDB to Start
      - sleep 20
      # Test CouchDB
      - curl http://127.0.0.1:5985
      script:
      # Gradle Build
      - ./gradlew build
      # Start Application
      - java -jar build/libs/micro-${RELEASE_NAME}-0.0.1.jar &
      # Let the application start
      - bash scripts/health_check.sh
      # Run API Test
      - bash scripts/api_tests.sh 127.0.0.1 ${SERVICE_PORT}
    - stage: docker build, deploy, and test
      services:
      - docker
      install:
        - true
      before_script:
      # Start CouchDB 2.1.2 and wait for it to start
      # Using this instead of built-in couchdb, which is 1.6.1
      - docker run --name couchdb -p 5985:5984 -e COUCHDB_USER=${COUCHDB_USER} -e COUCHDB_PASSWORD=${COUCHDB_PASSWORD} -d couchdb:2.1.2
      # Wait for CouchDB to Start
      - sleep 20
      # Test CouchDB
      - curl http://127.0.0.1:5985
      # Get IP Address for CouchDB
      - COUCHDB_HOST=$(docker inspect couchdb | jq -r '.[0].NetworkSettings.IPAddress')
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Start Container and Connect to CouchDB Service
      - docker run --net=host --name ${RELEASE_NAME} -d -p ${SERVICE_PORT}:${SERVICE_PORT} -p ${MANAGEMENT_PORT}:${MANAGEMENT_PORT} -e COUCHDB_HOST="${COUCHDB_HOST}" -e COUCHDB_PORT="5984" -e HS256_KEY="${HS256_KEY}" "${IMAGE_NAME}:${TAG}"
      # Check that the container is running
      - docker ps
      # Check logs to see if it started properly
      - docker logs -f ${RELEASE_NAME} &
      # Let the application start
      - bash scripts/health_check.sh
      # Run API Test
      - bash scripts/api_tests.sh 127.0.0.1 ${SERVICE_PORT} $HS256_KEY $TEST_USER $TEST_PASSWORD
    - stage: kubernetes build, deploy, and test
      services:
      - docker
      env:
      # Minikube variables
      - CHANGE_MINIKUBE_NONE_USER=true
      - MINIKUBE_WANTUPDATENOTIFICATION=false
      - MINIKUBE_WANTREPORTERRORPROMPT=false
      - MINIKUBE_HOME=$HOME
      - KUBECONFIG=$HOME/.kube/config
      # Application variables
      - CHART_NAME=customer
      install:
        - true
      before_script:
      # Install minikube and helm
      - wget https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-kubernetes/spring/scripts/install_minikube_and_helm.sh && chmod +x install_minikube_and_helm.sh && bash install_minikube_and_helm.sh && rm install_minikube_and_helm.sh
      # Install CouchDB
      - helm upgrade --install couchdb --version 0.2.2 --set service.externalPort=5985,fullnameOverride=${RELEASE_NAME}-couchdb,createAdminSecret=true,adminUsername=${COUCHDB_USER},adminPassword=${COUCHDB_PASSWORD},clusterSize=1,persistentVolume.enabled=false incubator/couchdb
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # helm lint
      - helm lint chart/${CHART_NAME}
      # helm package
      - helm package chart/${CHART_NAME}
      # helm install from packaged chart. Use pullPolicy=Never so it uses local docker image
      - CHART_VERSION="$(cat chart/${CHART_NAME}/Chart.yaml | grep version | awk '{print $2}')"
      - helm upgrade --install ${RELEASE_NAME} --set image.repository="${IMAGE_NAME}",image.tag="${TAG}",image.pullPolicy=Never,testUser.createUser=false,couchdb.adminUsername=${COUCHDB_USER},couchdb.adminPassword=${COUCHDB_PASSWORD} ${CHART_NAME}-${CHART_VERSION}.tgz
      # Get Deployment Name
      - DEPLOYMENT="deployment/${RELEASE_NAME}-${CHART_NAME}"
      # Wait for deployment to be ready
      - kubectl rollout status ${DEPLOYMENT}
      # Get logs
      - kubectl logs -f ${DEPLOYMENT} &
      # Port Forwarding
      - kubectl port-forward ${DEPLOYMENT} ${SERVICE_PORT} ${MANAGEMENT_PORT} &
      - echo "Sleeping for 3 seconds while connection is established..."
      - sleep 3
      # Let the application start
      - bash scripts/health_check.sh
      # Run API Test
      - bash scripts/api_tests.sh 127.0.0.1 ${SERVICE_PORT} $HS256_KEY $TEST_USER $TEST_PASSWORD